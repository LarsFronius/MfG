#!/usr/bin/env python
import sys
import socket
import time
import subprocess
import ConfigParser
import logging
from optparse import OptionParser

import yaml

from munin import MuninClient

DEFAULT_CONFIG_FILE = '/etc/mfg.ini'
DEFAULT_CARBON_PORT = 2003
DEFAULT_FACTER_PREFIX = '{hostname}.'
DEFAULT_INTERVAL = 60

def facter():
    try:
        p = subprocess.Popen(['facter','-py'], stdout=subprocess.PIPE)
        p.wait()
        y = yaml.load(p.stdout)
        logging.debug('Got facts: %s', y)
        return y
    except OSError, e:
        logging.warning('Could not get facts: %s', e)
        return None

def compute_prefix(facts, prefix_pattern):
    """
    >>> prefix = 'servers.{datacenter}.{hostname}.'
    >>> facts = {'datacenter':'eu-west', 'hostname':'kellerautomat'}
    >>> compute_prefix(facts, prefix)
    'servers.eu-west.kellerautomat.'
    >>> prefix = '{hostname}.'
    >>> facts = None
    >>> compute_prefix(facts, prefix) == socket.gethostname() + '.'
    True
    """
    try:
        if facts:
            return prefix_pattern.format(**facts)
        else:
            return prefix_pattern.format(hostname=socket.gethostname())
    except KeyError, e:
        logging.error('not all facts in "%s" could be resolved: %s', prefix_pattern, e)
        raise

class CarbonClient(object):

    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self._init_socket()

    def _init_socket(self):
        self.sock = socket.socket()
        self.sock.connect((self.host, self.port))

    def send(self, message):
        self.sock.sendall(message)


def parse_config_file(config_file):
    c = ConfigParser.ConfigParser()
    c.read(config_file)
    host = c.get('carbon','host')
    try:
        port = c.get('carbon','port')
    except ConfigParser.Error:
        logging.warning('Could not get carbon port from config %s, using %s', config_file, DEFAULT_CARBON_PORT)
        port = DEFAULT_CARBON_PORT

    try:
        prefix_pattern = c.get('facter', 'prefix')
    except ConfigParser.Error:
        logging.warning('Could not get facter prefix from config %s, using %s', config_file, DEFAULT_FACTER_PREFIX)
        prefix_pattern = DEFAULT_FACTER_PREFIX

    try:
        interval = c.getint('mfg', 'interval')
    except ConfigParser.Error:
        interval = 60

    return host, port, prefix_pattern, interval

def parse_command_line():
    # TODO
    parser = OptionParser()
    parser.add_option("-c", "--config", dest="config_file", default = DEFAULT_CONFIG_FILE,
            help="use configuration in FILE, default: %default", metavar="FILE")
    parser.add_option("-i", "--interval", dest="interval", default = DEFAULT_INTERVAL,
            help="send metrics every SECONDS, default: %default", metavar="SECONDS")
    parser.add_option("-H", "--carbon-host", dest="carbon_host",
            help="send metrics to carbon host HOST", metavar="HOST")
    parser.add_option("-p", "--carbon-port", dest="carbon_port", default=DEFAULT_CARBON_PORT,
            help="use carbon port PORT, default: %default", metavar="PORT")
    parser.add_option("-m", "--metric-prefix", dest="prefix", default=DEFAULT_CARBON_PORT,
            help="use carbon port PORT, default: %default", metavar="PORT")
    parser.add_option("-q", "--quiet", action="store_false", dest="verbose",
            default=True, help="don't print status messages to stdout")

    (options, args) = parser.parse_args()
    return options

def fetch_from_munin(munin_client):
    logging.debug('going to ask munin for items')
    list_result = munin_client.list()
    logging.debug('munin: list command returned %d results', len(list_result))
    timestamp = int(time.time())
    messages = []
    for item in list_result:
        values = munin_client.fetch(item)
        for key in values:
            message = "%s.%s %s %d\n" % (item, key, values[key], timestamp)
            logging.debug('fetched from munin: %s', message)
            messages.append(message)

    return messages

def send_to_carbon(carbon_client, prefix, messages):
    prefixed_messages = [prefix + message for message in messages]
    carbon_client.send("".join(messages))
    logging.info('sent %d messages', len(messages))

def main():
    options = parse_command_line()
    config_file = options.config_file if options.config_file else DEFAULT_CONFIG_FILE
    host, port, prefix_pattern, interval = parse_config_file(config_file)

    if options.carbon_port:
        host = options.carbon_port

    if options.carbon_host:
        host = options.carbon_host

    if options.prefix:
        prefix_pattern = options.prefix

    facts = facter()

    prefix = compute_prefix(facts, prefix_pattern)
    carbon_client = CarbonClient(host, port)
    munin_client = MuninClient('127.0.0.1')

    while True:
        started = time.time()
        next_iteration = started + interval

        messages = fetch_from_munin(munin_client)
        send_to_carbon(carbon_client, prefix, messages)

        now = time.time()
        remaining_sleep = next_iteration - now
        if remaining_sleep > 0:
            logging.debug('sleeping %d', remaining_sleep)
            time.sleep(remaining_sleep)
        else:
            logging.warning('processing took %d seconds more than interval(%d), increase interval', -remaining_sleep, interval)

if __name__ == '__main__':
    logging.root.name = 'mfg'
    logging.basicConfig(level=logging.DEBUG)
    main()
